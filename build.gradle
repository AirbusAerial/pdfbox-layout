
task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

allprojects {

  apply plugin: "java"
  
  group = 'com.github.ralfstuckert.pdfbox-layout'
  version = '0.1.1'

  repositories {
      mavenCentral()
  }

  dependencies {
    compile files("build/classes/main")
    compile files("examples")   
  }

  task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
  }

  javadoc {
    failOnError = false
  }

  clean{
    delete "src"
    delete "examples"
  }  

  task examplesJar(type: Jar, dependsOn: "createExamples" ) {
    classifier = 'examples'
    from fileTree("examples")
    include '**/*'
  }
  
  artifacts {
    archives sourcesJar
    archives javadocJar
    archives examplesJar
  }

  
  task createExamples(description: 'Creates the example pdfs', dependsOn: 'compileExamples' ) << {
   def oldPdfs = fileTree("examples").include('**/*.pdf')
   oldPdfs.each { file -> file.delete() }
   
   def examples = fileTree("examples").include('**/*.class')
   examples.each { example ->
  	  def mainClassName = getClassName(example)
  	  if (!mainClassName.contains('$') ) {
         javaexec {
            main = mainClassName
            classpath = sourceSets.main.compileClasspath
            workingDir = "examples"
         }
      }
   }
    
   def classFiles = fileTree("examples").include('**/*.class')
   classFiles.each { file -> file.delete() }
}


task compileExamples(type: JavaCompile, dependsOn: 'compileJava') {
   source = fileTree(dir: "examples", include: '**/*.java')
   destinationDir = file("examples")
   sourceCompatibility = '1.7'
   targetCompatibility = '1.7'
   dependencyCacheDir = file("${buildDir}/dependency-cache")
   classpath = sourceSets.main.compileClasspath
}

}


  dependencies {
   compile("org.apache.pdfbox:pdfbox:2.0.0")
  }

project('pdfbox2-layout') {

}


def getClassName(classFile) {
	def name = classFile.getName();
	name = name.substring(0, name.lastIndexOf("."))
	return name
}




