apply plugin: 'java'

defaultTasks 'help'

ext {
    pdfboxVersion = '1.8.8'
    basedir = '..'
    examplesDir = "$basedir/examples"
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
   compile("org.apache.pdfbox:pdfbox:${pdfboxVersion}")
   compile files("target/classes")
   compile files("examples")   
}

task wrapper(type: Wrapper) {
	gradleVersion = '2.3'
}

task adaptToPdfboxVersion(description: 'adapts the imports and the pdfbox-dependency in the pom to the given version') << {
   adaptPom();
//   adaptSourceFolder("$basedir"/src/main/java")
//   adaptSourceFolder("$basedir"/examples")
}

def adaptSourceFolder(def sourceFolder) {
   def list = ant.fileScanner {  
      fileset(dir:sourceFolder) {  
         include(name:"**/*.java")  
      }  
    }  
    list.each { file ->  	
       adaptSourceFile( file )
    }
}

def adaptPom() {
  def pomFile = new File("$basedir/pom.xml")
  def pom = (new XmlParser()).parse(pomFile)
  def oldVersion = pom.version.text();
  logger.quiet(oldVersion)
  def pdfboxDependency = pom.dependencies.dependency.find{it.artifactId.text() == 'pdfbox'}
  pdfboxDependency.version[0].value = pdfboxVersion
  def writer = new OutputStreamWriter(new FileOutputStream(pomFile), "UTF-8")
  def xmlPrinter = new XmlNodePrinter(new PrintWriter(writer))
  xmlPrinter.setPreserveWhitespace(true)
  xmlPrinter.print(pom)
}

def adaptSourceFile(def sourceFile) {
	    logger.quiet("calling ant replace on $sourceFile")
	def oldToNew = [ 'org.apache.pdfbox.pdmodel.edit.PDPageContentStream':'org.apache.pdfbox.pdmodel.PDPageContentStream']
	oldToNew.each { oldName, newName ->
	    def from = oldName
	    def to = newName
	    if (pdfboxVersion.startsWith('1')) {
            from = newName
            to = oldName	    
	    }
	    logger.quiet("replaing $from by $to")
        ant.replace(file: sourceFile, token: from, value: to)
	}
}

task createExamples(description: 'Creates the example pdfs', dependsOn: 'compileExamples' ) << {
   def oldPdfs = fileTree("$examplesDir").include('**/*.pdf')
   oldPdfs.each { file -> file.delete() }
   
   def examples = fileTree("$examplesDir").include('**/*.class')
   examples.each { example ->
  	  def mainClassName = getClassName(example)
  	  if (!mainClassName.contains('$') ) {
         javaexec {
            main = mainClassName
            classpath = sourceSets.main.compileClasspath
            workingDir = "$examplesDir"
         }
      }
   }
    
}


task compileExamples(type: JavaCompile) {
   source = fileTree(dir: "$examplesDir", include: '**/*.java')
   destinationDir = file("$examplesDir")
   sourceCompatibility = '1.7'
   targetCompatibility = '1.7'
   dependencyCacheDir = file("${buildDir}/dependency-cache")
   classpath = sourceSets.main.compileClasspath
}

def getClassName(classFile) {
	def name = classFile.getName();
	name = name.substring(0, name.lastIndexOf("."))
	return name
}